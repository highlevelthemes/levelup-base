{"version":3,"file":"defaults.js","sources":["../../../src/js/components/defaults.ts"],"sourcesContent":["// Theme default variables are set on :root in defaults.scss\n// e.g. --theme-default-primary-color\n// Due to mixed browser support for using @property initial values\n// when a css value is invalid, this javascript code is needed.\n// It sets the theme css variables to the default values if the\n// theme variable is invalid.\nconst themeVariablesDefaults = [\n  \"theme-primary-color\",\n  \"theme-secondary-color\",\n  \"theme-accent-color\",\n  \"theme-attention-color\",\n  \"theme-text-headline-color\",\n  \"theme-text-content-color\",\n  \"theme-text-link-color\",\n  \"theme-text-dark-bg-color\",\n  \"theme-icon-color\",\n  \"theme-button-primary-text-color\",\n  \"theme-button-primary-bg-color\",\n  \"theme-background-1-color\",\n  \"theme-background-2-color\",\n  \"theme-background-dark-color\",\n]\n\nconst globalVariables = [\n  \"headlinefont\",\n  \"contentfont\",\n]\n\nexport function setCSSDefaults(): void {\n  // Set invalid theme variables to default value\n  themeVariablesDefaults.forEach((name) => {\n    const themeVar = `--${name}`\n    // Check if theme variable is improperly set\n    if (\n      getComputedStyle(document.documentElement)\n        .getPropertyValue(themeVar)\n        .trim().length < 2\n    ) {\n      // Set to default value\n      const defaultValue = getComputedStyle(\n        document.documentElement\n      ).getPropertyValue(`--default-${name}`)\n      document.documentElement.style.setProperty(themeVar, defaultValue)\n      console.log(`Level Up: ${themeVar} set to default:`, defaultValue)\n    }\n  })\n  // Set global variables if global override is set.\n  // e.g. Set --headlinefont to --global-headlinefont if the global is set.\n  // Globals act as overrides for GHL or other root variables.\n  globalVariables.forEach((name) => {\n    const varName = `--global-${name}`\n    const value = getComputedStyle(document.documentElement)\n      .getPropertyValue(varName)\n      .trim()\n    // Set the root variable if the global variable is set\n    if (value.replace(/[\"']/g, \"\").length > 0) {\n      document.documentElement.style.setProperty(`--${name}`, value)\n      console.log(`Level Up: --${name} set to global value:`, value)\n    }\n  })\n}\n"],"names":[],"mappings":";;;;;;AAMA,MAAM,sBAAyB,GAAA;AAAA,EAC7B,qBAAA;AAAA,EACA,uBAAA;AAAA,EACA,oBAAA;AAAA,EACA,uBAAA;AAAA,EACA,2BAAA;AAAA,EACA,0BAAA;AAAA,EACA,uBAAA;AAAA,EACA,0BAAA;AAAA,EACA,kBAAA;AAAA,EACA,iCAAA;AAAA,EACA,+BAAA;AAAA,EACA,0BAAA;AAAA,EACA,0BAAA;AAAA,EACA,6BAAA;AACF,CAAA,CAAA;AAEA,MAAM,eAAkB,GAAA;AAAA,EACtB,cAAA;AAAA,EACA,aAAA;AACF,CAAA,CAAA;AAEO,SAAS,cAAuB,GAAA;AAErC,EAAuB,sBAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AACvC,IAAM,MAAA,QAAA,GAAW,KAAK,IAAI,CAAA,CAAA,CAAA;AAE1B,IACE,IAAA,gBAAA,CAAiB,QAAS,CAAA,eAAe,CACtC,CAAA,gBAAA,CAAiB,QAAQ,CACzB,CAAA,IAAA,EAAO,CAAA,MAAA,GAAS,CACnB,EAAA;AAEA,MAAA,MAAM,YAAe,GAAA,gBAAA;AAAA,QACnB,QAAS,CAAA,eAAA;AAAA,OACT,CAAA,gBAAA,CAAiB,CAAa,UAAA,EAAA,IAAI,CAAE,CAAA,CAAA,CAAA;AACtC,MAAA,QAAA,CAAS,eAAgB,CAAA,KAAA,CAAM,WAAY,CAAA,QAAA,EAAU,YAAY,CAAA,CAAA;AACjE,MAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,UAAA,EAAa,QAAQ,CAAA,gBAAA,CAAA,EAAoB,YAAY,CAAA,CAAA;AAAA,KACnE;AAAA,GACD,CAAA,CAAA;AAID,EAAgB,eAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AAChC,IAAM,MAAA,OAAA,GAAU,YAAY,IAAI,CAAA,CAAA,CAAA;AAChC,IAAM,MAAA,KAAA,GAAQ,iBAAiB,QAAS,CAAA,eAAe,EACpD,gBAAiB,CAAA,OAAO,EACxB,IAAK,EAAA,CAAA;AAER,IAAA,IAAI,MAAM,OAAQ,CAAA,OAAA,EAAS,EAAE,CAAA,CAAE,SAAS,CAAG,EAAA;AACzC,MAAA,QAAA,CAAS,gBAAgB,KAAM,CAAA,WAAA,CAAY,CAAK,EAAA,EAAA,IAAI,IAAI,KAAK,CAAA,CAAA;AAC7D,MAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,YAAA,EAAe,IAAI,CAAA,qBAAA,CAAA,EAAyB,KAAK,CAAA,CAAA;AAAA,KAC/D;AAAA,GACD,CAAA,CAAA;AACH;;;;"}