{"version":3,"file":"all.min.js","sources":["../../src/js/components/defaults.ts","../../src/js/all.ts"],"sourcesContent":["// Theme default variables are set on :root in defaults.scss\n// e.g. --theme-default-primary-color\n// Due to mixed browser support for using @property initial values\n// when a css value is invalid, this javascript code is needed.\n// It sets the theme css variables to the default values if the\n// theme variable is invalid.\nconst themeVariablesDefaults = [\n  \"theme-primary-color\",\n  \"theme-secondary-color\",\n  \"theme-accent-color\",\n  \"theme-attention-color\",\n  \"theme-text-headline-color\",\n  \"theme-text-content-color\",\n  \"theme-text-link-color\",\n  \"theme-text-dark-bg-color\",\n  \"theme-icon-color\",\n  \"theme-button-primary-text-color\",\n  \"theme-button-primary-bg-color\",\n  \"theme-background-1-color\",\n  \"theme-background-2-color\",\n  \"theme-background-dark-color\",\n]\n\nconst globalVariables = [\n  \"headlinefont\",\n  \"contentfont\",\n]\n\nexport function setCSSDefaults(): void {\n  // Set invalid theme variables to default value\n  themeVariablesDefaults.forEach((name) => {\n    const themeVar = `--${name}`\n    // Check if theme variable is improperly set\n    if (\n      getComputedStyle(document.documentElement)\n        .getPropertyValue(themeVar)\n        .trim().length < 2\n    ) {\n      // Set to default value\n      const defaultValue = getComputedStyle(\n        document.documentElement\n      ).getPropertyValue(`--default-${name}`)\n      document.documentElement.style.setProperty(themeVar, defaultValue)\n      console.log(`Level Up: ${themeVar} set to default:`, defaultValue)\n    }\n  })\n  // Set global variables if global override is set.\n  // e.g. Set --headlinefont to --global-headlinefont if the global is set.\n  // Globals act as overrides for GHL or other root variables.\n  globalVariables.forEach((name) => {\n    const varName = `--global-${name}`\n    const value = getComputedStyle(document.documentElement)\n      .getPropertyValue(varName)\n      .trim()\n    // Set the root variable if the global variable is set\n    if (value.replace(/[\"']/g, \"\").length > 0) {\n      document.documentElement.style.setProperty(`--${name}`, value)\n      console.log(`Level Up: --${name} set to global value:`, value)\n    }\n  })\n}\n","import { setCSSDefaults } from \"./components/defaults\"\n\nsetCSSDefaults()\n\nconsole.log(`Powered by __theme_name__ __theme_version__:`, \"__theme_website__\")\n"],"names":["themeVariablesDefaults","globalVariables","setCSSDefaults","name","themeVar","defaultValue","varName","value"],"mappings":"yBAMA,MAAMA,EAAyB,CAC7B,sBACA,wBACA,qBACA,wBACA,4BACA,2BACA,wBACA,2BACA,mBACA,kCACA,gCACA,2BACA,2BACA,6BACF,EAEMC,EAAkB,CACtB,eACA,aACF,EAEgB,SAAAC,GAAuB,CAErCF,EAAuB,QAASG,GAAS,CACvC,MAAMC,EAAW,KAAKD,CAAI,GAE1B,GACE,iBAAiB,SAAS,eAAe,EACtC,iBAAiBC,CAAQ,EACzB,KAAO,EAAA,OAAS,EACnB,CAEA,MAAMC,EAAe,iBACnB,SAAS,eACX,EAAE,iBAAiB,aAAaF,CAAI,EAAE,EACtC,SAAS,gBAAgB,MAAM,YAAYC,EAAUC,CAAY,EACjE,QAAQ,IAAI,aAAaD,CAAQ,mBAAoBC,CAAY,CACnE,CACF,CAAC,EAIDJ,EAAgB,QAASE,GAAS,CAChC,MAAMG,EAAU,YAAYH,CAAI,GAC1BI,EAAQ,iBAAiB,SAAS,eAAe,EACpD,iBAAiBD,CAAO,EACxB,KAAK,EAEJC,EAAM,QAAQ,QAAS,EAAE,EAAE,OAAS,IACtC,SAAS,gBAAgB,MAAM,YAAY,KAAKJ,CAAI,GAAII,CAAK,EAC7D,QAAQ,IAAI,eAAeJ,CAAI,wBAAyBI,CAAK,EAEjE,CAAC,CACH,CC1DAL,EAAAA,EAEA,QAAQ,IAAI,yCAAgD,2BAAmB"}