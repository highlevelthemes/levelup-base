{"version":3,"file":"all.js","sources":["../../src/js/components/defaults.ts","../../src/js/all.ts"],"sourcesContent":["// Theme default variables are set on :root in defaults.scss\n// e.g. --theme-default-primary-color\n// Due to mixed browser support for using @property initial values\n// when a css value is invalid, this javascript code is needed.\n// It sets the theme css variables to the default values if the\n// theme variable is invalid.\nconst themeVariablesDefaults = [\n  \"theme-primary-color\",\n  \"theme-secondary-color\",\n  \"theme-accent-color\",\n  \"theme-attention-color\",\n  \"theme-text-headline-color\",\n  \"theme-text-content-color\",\n  \"theme-text-link-color\",\n  \"theme-text-dark-bg-color\",\n  \"theme-icon-color\",\n  \"theme-button-primary-text-color\",\n  \"theme-button-primary-bg-color\",\n  \"theme-background-1-color\",\n  \"theme-background-2-color\",\n  \"theme-background-dark-color\",\n]\n\nconst globalVariables = [\n  \"headlinefont\",\n  \"contentfont\",\n]\n\nexport function setCSSDefaults(): void {\n  // Set invalid theme variables to default value\n  themeVariablesDefaults.forEach((name) => {\n    const themeVar = `--${name}`\n    // Check if theme variable is improperly set\n    if (\n      getComputedStyle(document.documentElement)\n        .getPropertyValue(themeVar)\n        .trim().length < 2\n    ) {\n      // Set to default value\n      const defaultValue = getComputedStyle(\n        document.documentElement\n      ).getPropertyValue(`--default-${name}`)\n      document.documentElement.style.setProperty(themeVar, defaultValue)\n      console.log(`Level Up: ${themeVar} set to default:`, defaultValue)\n    }\n  })\n  // Set global variables if global override is set.\n  // e.g. Set --headlinefont to --global-headlinefont if the global is set.\n  // Globals act as overrides for GHL or other root variables.\n  globalVariables.forEach((name) => {\n    const varName = `--global-${name}`\n    const value = getComputedStyle(document.documentElement)\n      .getPropertyValue(varName)\n      .trim()\n    // Set the root variable if the global variable is set\n    if (value.replace(/[\"']/g, \"\").length > 0) {\n      document.documentElement.style.setProperty(`--${name}`, value)\n      console.log(`Level Up: --${name} set to global value:`, value)\n    }\n  })\n}\n","import { setCSSDefaults } from \"./components/defaults\"\n\nsetCSSDefaults()\n\nconsole.log(`Powered by __theme_name__ __theme_version__:`, \"__theme_website__\")\n"],"names":[],"mappings":";;;EAMA,MAAM,sBAAyB,GAAA;EAAA,EAC7B,qBAAA;EAAA,EACA,uBAAA;EAAA,EACA,oBAAA;EAAA,EACA,uBAAA;EAAA,EACA,2BAAA;EAAA,EACA,0BAAA;EAAA,EACA,uBAAA;EAAA,EACA,0BAAA;EAAA,EACA,kBAAA;EAAA,EACA,iCAAA;EAAA,EACA,+BAAA;EAAA,EACA,0BAAA;EAAA,EACA,0BAAA;EAAA,EACA,6BAAA;EACF,CAAA,CAAA;EAEA,MAAM,eAAkB,GAAA;EAAA,EACtB,cAAA;EAAA,EACA,aAAA;EACF,CAAA,CAAA;EAEO,SAAS,cAAuB,GAAA;EAErC,EAAuB,sBAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;EACvC,IAAM,MAAA,QAAA,GAAW,KAAK,IAAI,CAAA,CAAA,CAAA;EAE1B,IACE,IAAA,gBAAA,CAAiB,QAAS,CAAA,eAAe,CACtC,CAAA,gBAAA,CAAiB,QAAQ,CACzB,CAAA,IAAA,EAAO,CAAA,MAAA,GAAS,CACnB,EAAA;EAEA,MAAA,MAAM,YAAe,GAAA,gBAAA;EAAA,QACnB,QAAS,CAAA,eAAA;EAAA,OACT,CAAA,gBAAA,CAAiB,CAAa,UAAA,EAAA,IAAI,CAAE,CAAA,CAAA,CAAA;EACtC,MAAA,QAAA,CAAS,eAAgB,CAAA,KAAA,CAAM,WAAY,CAAA,QAAA,EAAU,YAAY,CAAA,CAAA;EACjE,MAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,UAAA,EAAa,QAAQ,CAAA,gBAAA,CAAA,EAAoB,YAAY,CAAA,CAAA;EAAA,KACnE;EAAA,GACD,CAAA,CAAA;EAID,EAAgB,eAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;EAChC,IAAM,MAAA,OAAA,GAAU,YAAY,IAAI,CAAA,CAAA,CAAA;EAChC,IAAM,MAAA,KAAA,GAAQ,iBAAiB,QAAS,CAAA,eAAe,EACpD,gBAAiB,CAAA,OAAO,EACxB,IAAK,EAAA,CAAA;EAER,IAAA,IAAI,MAAM,OAAQ,CAAA,OAAA,EAAS,EAAE,CAAA,CAAE,SAAS,CAAG,EAAA;EACzC,MAAA,QAAA,CAAS,gBAAgB,KAAM,CAAA,WAAA,CAAY,CAAK,EAAA,EAAA,IAAI,IAAI,KAAK,CAAA,CAAA;EAC7D,MAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,YAAA,EAAe,IAAI,CAAA,qBAAA,CAAA,EAAyB,KAAK,CAAA,CAAA;EAAA,KAC/D;EAAA,GACD,CAAA,CAAA;EACH;;EC1DA,cAAe,EAAA,CAAA;EAEf,OAAQ,CAAA,GAAA,CAAI,0CAAgD,2BAAmB,CAAA;;;;;;"}